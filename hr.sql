--1. 사원번호가 176인 사원의 LAST_NAME, 부서번호 정보 조회
SELECT
	LAST_NAME,
	DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	EMPLOYEE_ID = 176;
--2. 급여가 12000 이상 되는 직원들의 LAST_NAME, 급여 조회
SELECT
	LAST_NAME,
	SALARY
FROM
	EMPLOYEES e
WHERE
	SALARY >= 12000;
--3. 급여의 범위가 5000 ~ 12000이 아닌 사람들의 LAST_NAME, 급여 조회
SELECT
	LAST_NAME,
	SALARY
FROM
	EMPLOYEES e
WHERE
	SALARY > 12000
	OR SALARY < 5000;

--4. 20번 및 50번 부서에 근무하는 사원들의 LAST_NAME, 부서번호 조회 (이름 오름차순, 부서번호 오름차순)
SELECT
	e.LAST_NAME,
	e.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (20, 50)
ORDER BY
	LAST_NAME ASC,
	DEPARTMENT_ID ASC;

--5. 커미션을 받는 모든 사원들의 LAST_NAME, 급여, 커미션 조회 (급여 내림차순, 커미션 내림차순)
SELECT
	e.LAST_NAME,
	e.SALARY ,
	e.COMMISSION_PCT
FROM
	EMPLOYEES e
WHERE
	e.COMMISSION_PCT >0
ORDER BY
	e.SALARY DESC,
	e.COMMISSION_PCT DESC;

--6. 급여가 2500, 3500, 7000이 아니며 직무가 SA_REP, ST_CLERK 인 사원조회
SELECT
	*
FROM
	EMPLOYEES e
WHERE
	e.SALARY NOT IN (2500, 3500, 7000)
	AND e.JOB_ID IN ('SA_REP', 'ST_CLERK'); 

--7. 2015/02/20 ~ 2015/05/01 사이에 고용된 사원들의 LAST_NAME, 사번, 고용일자 조회(고용일차 내림차순)
SELECT
	e.LAST_NAME ,
	e.EMPLOYEE_ID ,
	e.HIRE_DATE
FROM
	EMPLOYEES e
WHERE
	e.HIRE_DATE BETWEEN '2015/02/20' AND '2015/05/01'
ORDER BY
	e.HIRE_DATE DESC; 

--8. 20번, 50번 부서 사원중에 연봉이 5000~12000인 사원의 LAST_NAME, 급여를 조회 (급여 오름차순)
SELECT
	e.LAST_NAME,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.DEPARTMENT_ID IN (20, 50)
	AND e.SALARY BETWEEN 5000 AND 12000 ORDER BY e.SALARY ASC;

--9. 연봉이 5000~ 12000 이 아닌 사원들의 LAST_NAME, 급여를 조회 (급여 오름차순)
SELECT
	e.LAST_NAME ,
	e.SALARY
FROM
	EMPLOYEES e
WHERE
	e.SALARY NOT BETWEEN 5000 AND 12000
ORDER BY
	e.SALARY ASC;

--10. 2015/02/20 ~ 2015/05/01에 고용된 사원들의 LAST_NAME, 사번, 고용일자 조회(고용일자 내림차순)
SELECT
	e.LAST_NAME ,
	e.EMPLOYEE_ID ,
	e.HIRE_DATE
FROM
	EMPLOYEES e
WHERE
	e.HIRE_DATE BETWEEN '2015/02/20' AND '2015/05/01'
ORDER BY
	e.HIRE_DATE DESC; 

--11. LAST_NAME에 u가 포함되는 사원들의 사번, LAST_NAME 조회
SELECT
	e.EMPLOYEE_ID ,
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%u%';

--12. LAST_NAME의 4번째 글자가 a인 사원들의 LAST_NAME 조회
SELECT
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '___a%';

--13. LAST_NAME에 a 혹은 e 글자가 있는 사원들의 LAST_NAME 조회 (LAST_NAME 오름차순)
SELECT
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%a%'
	OR e.LAST_NAME LIKE '%e%'
ORDER BY
	e.LAST_NAME ASC ; 

--14. LAST_NAME에 a, e 글자가 모두 포함된 사원들의 LAST_NAME을 조회 (LAST_NAME 오름차순)
SELECT
	e.LAST_NAME
FROM
	EMPLOYEES e
WHERE
	e.LAST_NAME LIKE '%a%e%'
	OR e.LAST_NAME LIKE '%e%a%'
ORDER BY
	e.LAST_NAME ASC ; 

--15. 매니저 ID가 없는 사원의 LAST_NAME, JOB_ID을 조회
SELECT
	e.LAST_NAME,
	e.JOB_ID
FROM
	EMPLOYEES e
WHERE
	e.MANAGER_ID IS NULL; 

--16. 직무가 ST_CLERK인 사원이 근무하고 있지 않은 부서ID를 조회, 단 부서번호가 NULL인 것은 제외
SELECT DISTINCT 
	e.DEPARTMENT_ID
FROM
	EMPLOYEES e
WHERE
	e.JOB_ID NOT IN ('ST_CLERK')
	AND e.DEPARTMENT_ID IS NOT NULL;
--17. COMMISSION_PCT 가 NULL이 아닌 사원들 중에서 COMMISSION= SALARY*COMMSION_PCT를 구하고 사번, FIRST_NAME, JOB_ID 함께 조회
SELECT  
	e.EMPLOYEE_ID , e.FIRST_NAME , e.JOB_ID , e.SALARY *e.COMMISSION_PCT AS COMMISSION
FROM
	EMPLOYEES e
WHERE
	e.COMMISSION_PCT IS NOT NULL;

-- 함수
-- 18. FIRST_NAME이 Curtis 인 사람의 FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, JOB_ID 조회 단, JOB_ID는 소문자로
SELECT
	e.FIRST_NAME ,
	e.LAST_NAME ,
	e.EMAIL ,
	e.PHONE_NUMBER ,
	LOWER(e.JOB_ID)
FROM
	EMPLOYEES e
WHERE
	e.FIRST_NAME = 'Curtis';

-- 19. 부서번호가 60, 70, 80, 90인 사원들의 사원번호, FIRST_NAME, HIRE_DATE, JOB_ID 조회 단, JOB_ID가 IT_PROG일 경우 프로그래머로 변경하여 출력
SELECT
	E.EMPLOYEE_ID ,
	E.FIRST_NAME ,
	E.HIRE_DATE ,
	REPLACE(E.JOB_ID, 'IT_PROG', '프로그래머') AS "JOB_ID"
FROM
	EMPLOYEES e
WHERE
	E.DEPARTMENT_ID IN (60, 70, 80, 90); 

-- 20. JOB_ID가 AD_PRES, PU_CLERK인 사원들의 사원번호, FIRST_NAME, LAST_NAME, 부서번호, JOB_ID 조회 단, 사원명은 FIRST_NAME과 LAST_NAME을 연결하여 출력
SELECT
	E.EMPLOYEE_ID ,
	CONCAT(E.FIRST_NAME , concat(' ',E.LAST_NAME)) AS "사원명",
	E.DEPARTMENT_ID ,
	E.JOB_ID
FROM
	EMPLOYEES e
WHERE
	JOB_ID IN('AD_PRES','ST_CLERK'); 


-- 다중행함수
-- 21. 회사 내의 최대연봉 및 최소 연봉의 차이를 조회 (sal_gap)
SELECT MAX(e.SALARY)-min(e.salary) AS "SAL_GAP" FROM EMPLOYEES e; 

-- 22. 매니저로 근무하는 사원들의 총 숫자 조회
SELECT COUNT(DISTINCT E.MANAGER_ID) AS "COUNT_MANAGER" FROM EMPLOYEES e; 

-- 23. 매니저가 관리하는 사원들 중에서 최소 급여를 받는 사원 조회(단, 최소 급여가 6000미만인 그룹은 나오지 않게)
-- 매니저ID, 최소 급여
SELECT
	E.MANAGER_ID ,
	MIN(E.SALARY)
FROM
	EMPLOYEES e
WHERE
	E.MANAGER_ID IS NOT NULL
GROUP BY
	E.MANAGER_ID
HAVING
	MIN(E.SALARY)>= 6000
ORDER BY E.MANAGER_ID ;  

-- JOIN
-- 24. 자신의 담당 매니저의 고용일보다 빠른 입사자 찾기
-- EMPLOYEES SELF JOIN
SELECT
	E.LAST_NAME AS "내 이름",
	E.HIRE_DATE AS "내 입사일",
	E2.FIRST_NAME AS "매니저 이름",
	E2.HIRE_DATE AS "매니저 입사일"
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.MANAGER_ID = E2.EMPLOYEE_ID
WHERE
	E.HIRE_DATE < E2.HIRE_DATE ;

-- 25. 도시 이름이 T로 시작하는 지역에 사는 사원들의 사번, LAST_NAME, 부서번호 조회
-- EMPLOYEES, DEPARTMENTS, LOCATIONS
SELECT
	E.EMPLOYEE_ID ,
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	L.CITY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN LOCATIONS l ON
	D.LOCATION_ID = L.LOCATION_ID
WHERE
	SUBSTR(L.CITY, 1, 1)= 'T'; 

-- 26. 위치 ID가 1700인 사원들의 사번, LAST_NAME, 부서번호, 연봉 조회
-- EMPLOYEES, DEPARTMENTS
SELECT
	E.EMPLOYEE_ID ,
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	E.SALARY
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE
	D.LOCATION_ID = 1700;
-- 27. 부서명, 위치ID, 각 부서별 사원총수, 부서별 평균 연봉 조회(평균 연봉은 소수점 2자리까지)
-- EMPLOYEES, DEPARTMENTS
SELECT
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID ,
	COUNT(*),
	ROUND(AVG(E.SALARY), 2)
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
GROUP BY 
	D.DEPARTMENT_NAME ,
	D.LOCATION_ID ;
-- 28. Executive 부서에 근무하는 모든 사원들의 LAST_NAME, 부서번호, 부서명, JOB_ID 조회
-- EMPLOYEES, DEPARTMENTS
SELECT
	E.LAST_NAME ,
	E.DEPARTMENT_ID ,
	D.DEPARTMENT_NAME ,
	E.JOB_ID
FROM
	EMPLOYEES e
JOIN DEPARTMENTS d ON
	E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE
	D.DEPARTMENT_NAME = 'Executive';

-- 29. 각 사원별 소속부서에서 자신보다 늦게 고용되었으나 보다 많은 연봉을 받는 사원이 있는 사원들의 이름 조회 (이름 : FIRST_NAME + LAST_NAME)
-- EMPLOYEES SELFJOIN
SELECT
	DISTINCT E.EMPLOYEE_ID ,
	CONCAT(e.FIRST_NAME,E.LAST_NAME)
FROM
	EMPLOYEES e
JOIN EMPLOYEES e2 ON
	E.HIRE_DATE < E2.HIRE_DATE
AND
	E.DEPARTMENT_ID = E2.DEPARTMENT_ID
AND
	E.SALARY < E2.SALARY
ORDER BY
	E.EMPLOYEE_ID ASC;

-- 서브쿼리
-- 30. JOB_ID가 'SA_MAN'인 사원들의 최대 연봉보다 높게 받는 사원들의 LAST_NAME, JOB_ID, SALARY 조회
SELECT E.LAST_NAME , E.JOB_ID , E.SALARY 
FROM EMPLOYEES e 
WHERE E.SALARY > ALL (SELECT E2.SALARY  FROM EMPLOYEES e2 WHERE E2.JOB_ID ='SA_MAN');

-- 31. 커미션을 받는 사원들의 부서와 연봉이 동일한 사원들의 LAST_NAME, 부서번호, 급여 조회
SELECT E.LAST_NAME , E.DEPARTMENT_ID , E.SALARY 
FROM EMPLOYEES e 
WHERE (E.DEPARTMENT_ID , E.SALARY) IN (SELECT E2.DEPARTMENT_ID , E2.SALARY FROM EMPLOYEES e2 WHERE E2.COMMISSION_PCT IS NOT NULL);

-- 32. (회사 전체 평균 연봉보다 더 버는 사원들 중 LAST_NAME에 u가 들어있는 사원)이 근무하는 부서에 있는 사원들의 사번, LAST_NAME, SALARY 조회
-- 평균연봉은 반올림 후 비교
SELECT E3.EMPLOYEE_ID , E3.LAST_NAME ,E3.SALARY 
FROM EMPLOYEES e3 
WHERE E3.DEPARTMENT_ID IN (SELECT DISTINCT E.DEPARTMENT_ID 
FROM EMPLOYEES e 
WHERE E.SALARY > (SELECT ROUND(AVG(E2.SALARY)) FROM EMPLOYEES e2 ) AND  E.LAST_NAME LIKE '%u%');

-- 33. 위치ID가 1700인 사원들의 급여, 커미션 추출 뒤 추출된 사원들의 급여와 커미션이 동일한 사원정보 출력
-- 사번, 이름(FIRST_NAME,LAST_NAME 합침), 부서번호, 급여
SELECT E.EMPLOYEE_ID , CONCAT(E.FIRST_NAME ,E.LAST_NAME ) AS NAME, E.DEPARTMENT_ID , E.SALARY
FROM EMPLOYEES e 
WHERE (E.SALARY, NVL(E.COMMISSION_PCT,0)) IN (SELECT E2.SALARY , NVL(E2.COMMISSION_PCT ,0) FROM EMPLOYEES e2 JOIN DEPARTMENTS d ON E2.DEPARTMENT_ID = D.DEPARTMENT_ID WHERE D.LOCATION_ID =1700);

-- 34. 총 사원 수 및 2011~2014년도 별 고용된 사원들의 총 수 조회
-- SELECT 절에 사용하는 서브쿼리로 작성
SELECT DISTINCT (SELECT COUNT(E3.EMPLOYEE_ID ) FROM EMPLOYEES e3 ) AS "총 사원 수", 
	(SELECT COUNT(*) FROM EMPLOYEES e2 WHERE TO_CHAR(E2.HIRE_DATE ,'YYYY') ='2011') AS "2011 입사자",
	(SELECT COUNT(*) FROM EMPLOYEES e2 WHERE TO_CHAR(E2.HIRE_DATE ,'YYYY') ='2012') AS "2012 입사자",
	(SELECT COUNT(*) FROM EMPLOYEES e2 WHERE TO_CHAR(E2.HIRE_DATE ,'YYYY') ='2013') AS "2013 입사자",
	(SELECT COUNT(*) FROM EMPLOYEES e2 WHERE TO_CHAR(E2.HIRE_DATE ,'YYYY') ='2014') AS "2014 입사자"
FROM EMPLOYEES e ;


